"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _penpal = _interopRequireDefault(require("penpal"));

var _get = _interopRequireDefault(require("lodash-es/get"));

var _isEqual = _interopRequireDefault(require("lodash-es/isEqual"));

var _cloneDeep = _interopRequireDefault(require("lodash-es/cloneDeep"));

var _flattenDeep = _interopRequireDefault(require("lodash-es/flattenDeep"));

var _keys = _interopRequireDefault(require("lodash-es/keys"));

var _entries = _interopRequireDefault(require("lodash-es/entries"));

var _autoBind = _interopRequireDefault(require("auto-bind"));

require("./style/index.sass");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var toPath = function toPath() {
  for (var _len = arguments.length, chunks = new Array(_len), _key = 0; _key < _len; _key++) {
    chunks[_key] = arguments[_key];
  }

  return (0, _flattenDeep["default"])(chunks).join('.');
};

var KEBAB_REGEX = /[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g;

var dashCase = function dashCase(str) {
  return str.replace(KEBAB_REGEX, function (match) {
    return "-".concat(match.toLowerCase());
  });
};

var fail = function fail(message) {
  console.error(message);
  throw new Error(message);
};

var Plugin = /*#__PURE__*/function () {
  function Plugin(parent, settings) {
    var _this = this;

    _classCallCheck(this, Plugin);

    (0, _autoBind["default"])(this);
    this._settings = settings;
    this._parent = parent;
    this._listeners = {};
    this._mutationObserver = new MutationObserver(this._autoUpdateHeight);
    this._oldHeight = null;
    (0, _entries["default"])(settings.theme).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          varName = _ref2[0],
          color = _ref2[1];

      document.body.style.setProperty("--".concat(dashCase(varName)), color);
    });
    (0, _keys["default"])(this._settings).forEach(function (key) {
      if (key !== 'itemValue') {
        Object.defineProperty(_this, key, {
          get: function get() {
            return (0, _cloneDeep["default"])(_this._settings[key]);
          }
        });
      }
    });
  }

  _createClass(Plugin, [{
    key: "_autoUpdateHeight",
    value: function _autoUpdateHeight() {
      this.updateHeight();
    }
  }, {
    key: "getFieldValue",
    value: function getFieldValue() {
      for (var _len2 = arguments.length, pathChunks = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        pathChunks[_key2] = arguments[_key2];
      }

      if (pathChunks.length === 0) {
        console.error('getFieldValue requires a path');
        return undefined;
      }

      return (0, _cloneDeep["default"])((0, _get["default"])(this._settings.itemValue, toPath(pathChunks)));
    }
  }, {
    key: "setFieldValue",
    value: function setFieldValue() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      if (args.length < 2) {
        console.error('setFieldValue requires path and a new value');
        return;
      }

      var pathChunks = args.slice(0, -1);
      var value = args[args.length - 1];
      var path = toPath(pathChunks);

      this._parent.setFieldValue(path, value);
    }
  }, {
    key: "toggleField",
    value: function toggleField() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      if (args.length < 2) {
        console.error('toggleField requires path and a new value');
        return;
      }

      var pathChunks = args.slice(0, -1);
      var value = args[args.length - 1];
      var path = toPath(pathChunks);

      this._parent.toggleField(path, value);
    }
  }, {
    key: "disableField",
    value: function disableField() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      if (args.length < 2) {
        console.error('disableField requires path and a new value');
        return;
      }

      var pathChunks = args.slice(0, -1);
      var value = args[args.length - 1];
      var path = toPath(pathChunks);

      this._parent.disableField(path, value);
    }
  }, {
    key: "addChangeListener",
    value: function addChangeListener() {
      var _this2 = this;

      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      if (args.length < 2) {
        fail('addChangeListener requires a path an a callback function');
        return undefined;
      }

      var pathChunks = args.slice(0, -1);
      var cb = args[args.length - 1];
      var path = toPath(pathChunks);
      this._listeners[path] = this._listeners[path] || [];

      this._listeners[path].push(cb);

      return function () {
        _this2._listeners[path].filter(function (x) {
          return x !== cb;
        });
      };
    }
  }, {
    key: "addFieldChangeListener",
    value: function addFieldChangeListener() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      if (args.length < 2) {
        fail('addFieldChangeListener requires a path an a callback function');
        return undefined;
      }

      return this.addChangeListener.apply(this, ['itemValue'].concat(args));
    }
  }, {
    key: "startAutoResizer",
    value: function startAutoResizer() {
      this.updateHeight();

      if (this._isAutoResizing) {
        return;
      }

      this._isAutoResizing = true;

      this._mutationObserver.observe(window.document.body, {
        attributes: true,
        childList: true,
        subtree: true,
        characterData: true
      });

      window.addEventListener('resize', this._autoUpdateHeight);
    }
  }, {
    key: "stopAutoResizer",
    value: function stopAutoResizer() {
      if (!this._isAutoResizing) {
        return;
      }

      this._isAutoResizing = false;

      this._mutationObserver.disconnect();

      window.removeEventListener('resize', this._autoUpdateHeight);
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(height) {
      var realHeight = height == null ? Math.ceil(document.documentElement.getBoundingClientRect().height) : height;

      if (realHeight !== this._oldHeight) {
        this._parent.setHeight(realHeight);

        this._oldHeight = realHeight;
      }
    }
  }, {
    key: "createNewItem",
    value: function createNewItem(itemTypeId) {
      return this._parent.createNewItem(itemTypeId);
    }
  }, {
    key: "selectItem",
    value: function selectItem(itemTypeId) {
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref3$multiple = _ref3.multiple,
          multiple = _ref3$multiple === void 0 ? false : _ref3$multiple;

      return this._parent.selectItem(itemTypeId, {
        multiple: multiple
      });
    }
  }, {
    key: "editItem",
    value: function editItem(itemId) {
      return this._parent.editItem(itemId);
    }
  }, {
    key: "saveCurrentItem",
    value: function saveCurrentItem() {
      return this._parent.saveCurrentItem();
    }
  }, {
    key: "navigateTo",
    value: function navigateTo(path) {
      return this._parent.navigateTo(path);
    }
  }, {
    key: "scrollToField",
    value: function scrollToField() {
      for (var _len8 = arguments.length, pathChunks = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        pathChunks[_key8] = arguments[_key8];
      }

      if (pathChunks.length === 0) {
        console.error('scrollToField requires a path');
        return undefined;
      }

      var path = toPath(pathChunks);
      var locale = pathChunks.length > 1 && pathChunks.slice(-1)[0];
      return this._parent.scrollToField(path, locale);
    }
  }, {
    key: "notice",
    value: function notice(message) {
      return this._parent.notice(message);
    }
  }, {
    key: "alert",
    value: function alert(message) {
      return this._parent.alert(message);
    }
  }, {
    key: "selectUpload",
    value: function selectUpload() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$multiple = _ref4.multiple,
          multiple = _ref4$multiple === void 0 ? false : _ref4$multiple;

      return this._parent.selectUpload({
        multiple: multiple
      });
    }
  }, {
    key: "editUpload",
    value: function editUpload(uploadId) {
      return this._parent.editUpload(uploadId);
    }
  }, {
    key: "editUploadMetadata",
    value: function editUploadMetadata(uploadMetadata) {
      return this._parent.editUploadMetadata(uploadMetadata);
    }
  }]);

  return Plugin;
}();

var _default = {
  init: function init(cb) {
    var pluginPromise;

    var connection = _penpal["default"].connectToParent({
      methods: {
        onChange: function onChange(newSettings) {
          pluginPromise.then(function (ext) {
            var oldSettings = ext._settings;
            /* eslint-disable-next-line no-param-reassign */

            ext._settings = newSettings;
            (0, _entries["default"])(ext._listeners).forEach(function (_ref5) {
              var _ref6 = _slicedToArray(_ref5, 2),
                  path = _ref6[0],
                  listeners = _ref6[1];

              var newValue = (0, _get["default"])(newSettings, path);
              var oldValue = (0, _get["default"])(oldSettings, path);

              if (!(0, _isEqual["default"])(oldValue, newValue)) {
                listeners.forEach(function (l) {
                  return l(newValue, oldValue);
                });
              }
            });
          });
        }
      }
    }); // prettier-ignore


    pluginPromise = connection.promise.then(function (parent) {
      return parent.getSettings().then(function (settings) {
        return new Plugin(parent, settings);
      });
    });

    if (typeof cb === 'undefined') {
      return pluginPromise;
    }

    return pluginPromise.then(cb);
  }
};
exports["default"] = _default;